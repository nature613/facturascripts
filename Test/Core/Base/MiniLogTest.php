<?php

namespace FacturaScripts\Core\Base;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-21 at 11:14:25.
 */
class MiniLogTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MiniLog
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MiniLog;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::emergency
     * @todo   Implement testEmergency().
     */
    public function testEmergency() {
        // Remove the following lines when you implement this test.
        $level = ['emergency'];
        $this->object->clear();
        $this->object->emergency('emergency');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'emergency');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::alert
     * @todo   Implement testAlert().
     */
    public function testAlert() {
        // Remove the following lines when you implement this test.
        $level = ['alert'];
        $this->object->clear();
        $this->object->alert('alert');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'alert');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::critical
     * @todo   Implement testCritical().
     */
    public function testCritical() {
        // Remove the following lines when you implement this test.
        $level = ['critical'];
        $this->object->clear();
        $this->object->critical('critical');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'critical');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::error
     * @todo   Implement testError().
     */
    public function testError() {
        // Remove the following lines when you implement this test.
        $level = ['error'];
        $this->object->clear();
        $this->object->error('error');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'error');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::warning
     * @todo   Implement testWarning().
     */
    public function testWarning() {
        // Remove the following lines when you implement this test.
        $level = ['warning'];
        $this->object->clear();
        $this->object->warning('warning');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'warning');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::notice
     * @todo   Implement testNotice().
     */
    public function testNotice() {
        // Remove the following lines when you implement this test.
        $level = ['notice'];
        $this->object->clear();
        $this->object->notice('notice');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'notice');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::info
     * @todo   Implement testInfo().
     */
    public function testInfo() {
        // Remove the following lines when you implement this test.
        $level = ['info'];
        $this->object->clear();
        $this->object->info('info');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'info');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::debug
     * @todo   Implement testDebug().
     */
    public function testDebug() {
        // Remove the following lines when you implement this test.
        $level = ['debug'];
        $this->object->clear();
        $this->object->debug('debug');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'debug');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::sql
     * @todo   Implement testSql().
     */
    public function testSql() {
        // Remove the following lines when you implement this test.
        $level = ['sql'];
        $this->object->clear();
        $this->object->sql('sql');
        $data = $this->object->read($level);
        
        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'sql');
        $this->assertEmpty($data[0]['context']);

        
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::log
     * @todo   Implement testLog().
     */
    public function testLog() {
        // Remove the following lines when you implement this test.
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::read
     * @todo   Implement testRead().
     */
    public function testRead() {
        // Remove the following lines when you implement this test.
    }
    
    public function testClear(){
        $this->object->sql('sql');
        $this->object->clear();
        $this->assertEmpty($this->object->read());
        
    }

}
