<?php

namespace FacturaScripts\Core\Base;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-21 at 11:14:25.
 */
class MiniLogTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MiniLog
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new MiniLog;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::emergency
     * @todo   Implement testEmergency().
     */
    public function testEmergency() {
        // Remove the following lines when you implement this test.
        $this->object->clear();
        $this->object->emergency('emergency');

        $message[] = ['time' => time(), 'level' => 'emergency', 'message' => 'emergency', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::alert
     * @todo   Implement testAlert().
     */
    public function testAlert() {
        // Remove the following lines when you implement this test.
        
        $this->object->clear();
        $this->object->alert('alert');

        $message[] = ['time' => time(), 'level' => 'alert', 'message' => 'alert', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::critical
     * @todo   Implement testCritical().
     */
    public function testCritical() {
        // Remove the following lines when you implement this test.

        $this->object->clear();
        $this->object->critical('critical');
        
        $message[] = ['time' => time(), 'level' => 'critical', 'message' => 'critical', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::error
     * @todo   Implement testError().
     */
    public function testError() {
        // Remove the following lines when you implement this test.
        
        $this->object->clear();
        $this->object->error('error');

        $message[] = ['time' => time(), 'level' => 'error', 'message' => 'error', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::warning
     * @todo   Implement testWarning().
     */
    public function testWarning() {
        // Remove the following lines when you implement this test.
        
        $this->object->clear();
        $this->object->warning('warning');

        $message[] = ['time' => time(), 'level' => 'warning', 'message' => 'warning', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::notice
     * @todo   Implement testNotice().
     */
    public function testNotice() {
        // Remove the following lines when you implement this test.
        
        $this->object->clear();
        $this->object->notice('notice');

        $message[] = ['time' => time(), 'level' => 'notice', 'message' => 'notice', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::info
     * @todo   Implement testInfo().
     */
    public function testInfo() {
        // Remove the following lines when you implement this test.
        
        $this->object->clear();
        $this->object->info('info');

        $message[] = ['time' => time(), 'level' => 'info', 'message' => 'info', 'context' => array()];
        $this->assertEquals($message, $this->object->read());
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::debug
     * @todo   Implement testDebug().
     */
    public function testDebug() {
        // Remove the following lines when you implement this test.
        $level = ['debug'];
        $this->object->clear();
        $this->object->debug('debug');

        $message[] = ['time' => time(), 'level' => 'debug', 'message' => 'debug', 'context' => array()];
        $this->assertEquals($message, $this->object->read($level));
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::sql
     * @todo   Implement testSql().
     */
    public function testSql() {
        // Remove the following lines when you implement this test.
        $level = ['sql'];
        $this->object->clear();
        $this->object->sql('sql');

        $message[] = ['time' => time(), 'level' => 'sql', 'message' => 'sql', 'context' => array()];
        $this->assertEquals($message, $this->object->read($level));
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::log
     * @todo   Implement testLog().
     */
    public function testLog() {
        // Remove the following lines when you implement this test.
    }

    /**
     * @covers FacturaScripts\Core\Base\MiniLog::read
     * @todo   Implement testRead().
     */
    public function testRead() {
        // Remove the following lines when you implement this test.
    }

}
